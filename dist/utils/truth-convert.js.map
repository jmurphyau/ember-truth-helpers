{"version":3,"file":"truth-convert.js","sources":["../../src/utils/truth-convert.ts"],"sourcesContent":["import { isArray } from '@ember/array';\n\nexport type Falsy =\n  | { isTruthy: false }\n  | undefined\n  | null\n  | false\n  | 0\n  | -0\n  | 0n\n  | ''\n  | never[];\n\n// We check here in the order of the following function to maintain parity\n// Note that this will not handle EmberArray correctly.\n// We don't use Falsy since we want to be able to more definitively determine\n// truthy results.\nexport type TruthConvert<T> = T extends { isTruthy: true }\n  ? true\n  : T extends { isTruthy: false }\n  ? false\n  : T extends { isTruthy: boolean }\n  ? boolean\n  : T extends undefined | null\n  ? false\n  : T extends boolean\n  ? T\n  : T extends number\n  ? T extends 0 | -0\n    ? false\n    : number extends T\n    ? boolean\n    : true\n  : T extends bigint\n  ? T extends 0n\n    ? false\n    : bigint extends T\n    ? boolean\n    : true\n  : T extends string\n  ? T extends ''\n    ? false\n    : string extends T\n    ? boolean\n    : true\n  : T extends never[]\n  ? false\n  : T extends ArrayLike<unknown>\n  ? boolean\n  : T extends object\n  ? true\n  : boolean;\n\nexport type MaybeTruthy =\n  | { isTruthy: boolean }\n  | undefined\n  | null\n  | boolean\n  | number\n  | bigint\n  | string\n  | unknown[]\n  | object;\n\n// We also have to do individual overloads for each specific type so that we\n// don't lose specificity.\nexport default function truthConvert<T extends true | { isTruthy: true }>(\n  result: T\n): true;\nexport default function truthConvert<T extends { isTruthy: false }>(\n  result: T\n): false;\nexport default function truthConvert<T extends undefined | null | false>(\n  result: T\n): false;\nexport default function truthConvert<T extends number>(\n  result: T\n): T extends 0 | -0 ? false : true;\nexport default function truthConvert<T extends bigint>(\n  result: T\n): T extends 0n ? false : true;\nexport default function truthConvert<T extends string>(\n  result: T\n): T extends '' ? false : true;\nexport default function truthConvert<T>(result: T): TruthConvert<T>;\nexport default function truthConvert(result: unknown): boolean {\n  if (\n    typeof result === 'object' &&\n    result &&\n    'isTruthy' in result &&\n    typeof result.isTruthy === 'boolean'\n  ) {\n    return result.isTruthy;\n  }\n\n  if (isArray(result)) {\n    return result.length !== 0;\n  } else {\n    return !!result;\n  }\n}\n"],"names":["truthConvert","result","isTruthy","isArray","length"],"mappings":";;AAaA;AACA;AACA;AACA;AAgDA;AACA;AAoBe,SAASA,YAAYA,CAACC,MAAe,EAAW;AAC7D,EAAA,IACE,OAAOA,MAAM,KAAK,QAAQ,IAC1BA,MAAM,IACN,UAAU,IAAIA,MAAM,IACpB,OAAOA,MAAM,CAACC,QAAQ,KAAK,SAAS,EACpC;IACA,OAAOD,MAAM,CAACC,QAAQ,CAAA;AACxB,GAAA;AAEA,EAAA,IAAIC,OAAO,CAACF,MAAM,CAAC,EAAE;AACnB,IAAA,OAAOA,MAAM,CAACG,MAAM,KAAK,CAAC,CAAA;AAC5B,GAAC,MAAM;IACL,OAAO,CAAC,CAACH,MAAM,CAAA;AACjB,GAAA;AACF;;;;"}