{"version":3,"file":"and.js","sources":["../../src/helpers/and.ts"],"sourcesContent":["import Helper from '@ember/component/helper';\nimport truthConvert, {\n  MaybeTruthy,\n  TruthConvert,\n} from '../utils/truth-convert.ts';\n\ntype FirstFalsy<T> = T extends [infer Item]\n  ? Item\n  : T extends [infer Head, ...infer Tail]\n  ? TruthConvert<Head> extends false\n    ? Head\n    : TruthConvert<Head> extends true\n    ? FirstFalsy<Tail>\n    : Head | FirstFalsy<Tail>\n  : undefined;\n\ninterface AndSignature<T extends MaybeTruthy[]> {\n  Args: {\n    Positional: T;\n  };\n  Return: FirstFalsy<T>;\n}\n\n// We use class-based helper to ensure arguments are lazy-evaluated\n// and helper short-circuits like native JavaScript `&&` (logical AND).\nexport default class AndHelper<const T extends MaybeTruthy[]> extends Helper<\n  AndSignature<T>\n> {\n  public compute(params: T): FirstFalsy<T>;\n  public compute(params: T) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (truthConvert(params[i]) === false) {\n        return params[i];\n      }\n    }\n    return params[params.length - 1];\n  }\n}\n"],"names":["AndHelper","Helper","compute","params","i","len","length","truthConvert"],"mappings":";;;AAuBA;AACA;AACe,MAAMA,SAAS,SAAwCC,MAAM,CAE1E;EAEOC,OAAOA,CAACC,MAAS,EAAE;AACxB,IAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGF,MAAM,CAACG,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACjD,IAAIG,YAAY,CAACJ,MAAM,CAACC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;QACrC,OAAOD,MAAM,CAACC,CAAC,CAAC,CAAA;AAClB,OAAA;AACF,KAAA;AACA,IAAA,OAAOD,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,CAAA;AAClC,GAAA;AACF;;;;"}